import * as oclifTest from '@oclif/test';
import { expect, FancyTypes, Config, command } from '@oclif/test';
import { AuthFields } from '@salesforce/core/dist/lib/authInfo';
import { JsonMap, AnyJson } from '@salesforce/core';
import { TestContext } from '@salesforce/core/dist/test/testSetup';
import { loadConfig } from '@oclif/test/lib/load_config';
import * as IConfig from '@oclif/config/lib/config';
declare const $$: TestContext;
declare const test: oclifTest.FancyTypes.Base<oclifTest.FancyTypes.Context, {
    skip: {
        output: {};
        a1: {};
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    only: {
        output: {};
        a1: {};
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    retries: {
        output: {};
        a1: number;
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    catch: {
        output: {
            error: Error;
        };
        a1: string | RegExp | ((err: Error) => any);
        a2: {
            raiseIfNotThrown?: boolean;
        };
        a3: {};
        a4: {};
    };
} & {
    env: {
        output: {};
        a1: {
            [k: string]: string;
        };
        a2: oclifTest.FancyTypes.EnvOptions;
        a3: {};
        a4: {};
    };
} & {
    stub: {
        output: {
            stubs: any[];
        };
        a1: any;
        a2: string;
        a3: any;
        a4: {};
    };
} & {
    stdin: {
        output: {};
        a1: string;
        a2: number;
        a3: {};
        a4: {};
    };
} & {
    stderr: {
        output: {
            readonly stderr: string;
        };
        a1: {
            print?: boolean;
            stripColor?: boolean;
        };
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    stdout: {
        output: {
            readonly stdout: string;
        };
        a1: {
            print?: boolean;
            stripColor?: boolean;
        };
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    nock: {
        output: {
            error?: Error;
            nock: number;
        };
        a1: string;
        a2: oclifTest.FancyTypes.NockOptions | oclifTest.FancyTypes.NockCallback;
        a3: oclifTest.FancyTypes.NockCallback;
        a4: {};
    };
} & {
    loadConfig: {
        output: {
            config: oclifTest.Config.IConfig;
        };
        a1: loadConfig.Options;
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    command: {
        output: {
            config: oclifTest.Config.IConfig;
            expectation: string;
        };
        a1: string | string[];
        a2: loadConfig.Options;
        a3: {};
        a4: {};
    };
} & {
    exit: {
        output: {
            error: any;
        };
        a1: number;
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    hook: {
        output: {
            config: oclifTest.Config.IConfig;
            expectation: string;
        };
        a1: string;
        a2: object;
        a3: loadConfig.Options;
        a4: {};
    };
} & {
    withOrg: {
        output: any;
        a1: Partial<AuthFields>;
        a2: boolean;
        a3: {};
        a4: {};
    };
} & {
    withConnectionRequest: {
        output: any;
        a1: (request?: any, options?: any) => Promise<AnyJson>;
        a2: {};
        a3: {};
        a4: {};
    };
} & {
    withProject: {
        output: any;
        a1: JsonMap;
        a2: {};
        a3: {};
        a4: {};
    };
}>;
export default test;
export { expect, FancyTypes, Config, command, loadConfig, IConfig, test, $$, TestContext };
