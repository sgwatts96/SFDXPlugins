"use strict";
/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * Contains meta information about sfdx config properties.
 * @typedef {object} ConfigPropertyMeta
 * @property {string} key The config property name.
 * @property {input} value Reference to the config data input validation.
 * @property {boolean} hidden True if the property should be indirectly hidden from the user.
 * @property {boolean} encrypted True if the property values should be stored encrypted.
 */
/**
 * Contains meta information about sfdx config properties.
 * @typedef {object} ConfigPropertyMetaInput
 * @property {function} validator Test if the input value is valid.
 * @property {string} failedMessage The message to return in the error if the validation fails.
 */
/**
 * Supported Org Default Types.
 * @typedef {object} ORG_DEFAULT
 * @property {string} DEVHUB Default developer hub username.
 * @property {string} USERNAME Default username.
 * @property {function} list `() => string[]` List the Org defaults.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const messages_1 = require("../messages");
const configFile_1 = require("./configFile");
const sfdxError_1 = require("../sfdxError");
const crypto_1 = require("../crypto");
const sfdc_1 = require("../util/sfdc");
const SFDX_CONFIG_FILE_NAME = 'sfdx-config.json';
/**
 * The files where sfdx config values are stored for projects and the global space.
 *
 * *Note:* It is not recommended to instantiate this object directly when resolving
 * config values. Instead use {@link SfdxConfigAggregator}
 *
 * @extends ConfigFile
 *
 * @example
 * const localConfig = await SfdxConfig.retrieve<SfdxConfig>();
 * localConfig.set('defaultusername', 'username@company.org');
 * await localConfig.write();
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_config_values.htm
 */
class SfdxConfig extends configFile_1.ConfigFile {
    /**
     * Creates an instance of an SfdxConfig.
     * @param {ConfigOptions} options The config options.
     * @return {Promise<SfdxConfig>} An instance of SfdxConfig.
     * @throws {SfdxError} **`{name: 'InvalidInstanceUrl'}`** Invalid instance URL.
     * @throws {SfdxError} **`{name: 'InvalidApiVersion'}`** Invalid API version.
     * @example
     * const config: SfdxConfig = await Sfdx.create<SfdxConfig>({ isGlobal: false }};
     * config.set(allowedPropertyKey, value);
     * await config.write();
     */
    static async create(options) {
        if (!SfdxConfig.messages) {
            SfdxConfig.messages = messages_1.Messages.loadMessages('@salesforce/core', 'config');
        }
        if (!SfdxConfig.allowedProperties) {
            SfdxConfig.allowedProperties = [
                {
                    key: 'instanceUrl',
                    input: {
                        // If a value is provided validate it otherwise no value is unset.
                        validator: (value) => _.isNil(value) || sfdc_1.isSalesforceDomain(value),
                        failedMessage: SfdxConfig.messages.getMessage('InvalidInstanceUrl')
                    }
                },
                {
                    key: 'apiVersion',
                    hidden: true,
                    input: {
                        // If a value is provided validate it otherwise no value is unset.
                        validator: sfdc_1.validateApiVersion,
                        failedMessage: SfdxConfig.messages.getMessage('InvalidApiVersion')
                    }
                },
                { key: SfdxConfig.DEFAULT_DEV_HUB_USERNAME },
                { key: SfdxConfig.DEFAULT_USERNAME },
                { key: SfdxConfig.ISV_DEBUGGER_SID, encrypted: true },
                { key: SfdxConfig.ISV_DEBUGGER_URL }
            ];
        }
        SfdxConfig.propertyConfigMap = _.keyBy(SfdxConfig.allowedProperties, 'key');
        return await super.create(options);
    }
    static getFileName() {
        return SFDX_CONFIG_FILE_NAME;
    }
    /**
     * @returns {ConfigPropertyMeta[]} Returns an object representing the supported allowed properties.
     */
    static getAllowedProperties() {
        if (!SfdxConfig.allowedProperties) {
            throw new sfdxError_1.SfdxError('SfdxConfig meta information has not been initialized. Use SfdxConfig.create()');
        }
        return SfdxConfig.allowedProperties;
    }
    /**
     * The value of a supported config property.
     * @param {boolean} isGlobal True for a global config. False for a local config.
     * @param {string} propertyName The name of the property to set.
     * @param {string | boolean} value The property value.
     * @returns {Promise<object>}
     */
    static async update(isGlobal, propertyName, value) {
        const config = await SfdxConfig.create(SfdxConfig.getDefaultOptions(isGlobal));
        const content = await config.read();
        if (_.isNil(value)) {
            content.delete(propertyName);
        }
        else {
            content.set(propertyName, value);
        }
        return config.write(content);
    }
    /**
     * Clear all the configured properties both local and global.
     * @returns {Promise<void>}
     */
    static async clear() {
        let config = await SfdxConfig.create(SfdxConfig.getDefaultOptions(true));
        config.clear();
        await config.write();
        config = await SfdxConfig.create(SfdxConfig.getDefaultOptions(false));
        config.clear();
        await config.write();
    }
    /**
     * @returns {Promise<object>} Read, assign, and return the config contents.
     */
    async read() {
        try {
            await super.read();
            await this.cryptProperties(false);
            return this.getContents();
        }
        finally {
            await this.clearCrypto();
        }
    }
    /**
     * Writes SfdxConfig properties taking into account encrypted properties.
     * @param {ConfigContents} newContents The new SfdxConfig value to persist.
     * @return {Promise<ConfigContents>}
     */
    async write(newContents) {
        if (!_.isNil(newContents)) {
            this.setContents(newContents);
        }
        await this.cryptProperties(true);
        await super.write();
        await this.cryptProperties(false);
        return this.getContents();
    }
    /**
     * Sets a value for a property.
     * @param {string} propertyName The property to set.
     * @param {string | boolean} value The value of the property.
     * @returns {Promise<void>}
     * @throws {SfdxError} **`{name: 'InvalidConfigValue'}`** Invalid configuration value.
     */
    set(key, value) {
        const property = SfdxConfig.allowedProperties.find((allowedProp) => allowedProp.key === key);
        if (!property) {
            throw sfdxError_1.SfdxError.create('@salesforce/core', 'config', 'UnknownConfigKey', [key]);
        }
        if (property.input) {
            if (property.input && property.input.validator(value)) {
                super.set(property.key, value);
            }
            else {
                throw sfdxError_1.SfdxError.create('@salesforce/core', 'config', 'InvalidConfigValue', [property.input.failedMessage]);
            }
        }
        else {
            super.set(property.key, value);
        }
        return this.getContents();
    }
    /**
     * Initialize the crypto dependency.
     * @return {Promise<void>}
     */
    async initCrypto() {
        if (!this.crypto) {
            this.crypto = await crypto_1.Crypto.create();
        }
    }
    /**
     * Closes the crypto dependency. Crypto should be close after it's used and no longer needed.
     * @return {Promise<void>}
     */
    async clearCrypto() {
        if (this.crypto) {
            this.crypto.close();
            delete this.crypto;
        }
    }
    /**
     * Get an individual property config.
     * @param {string} propertyName The name of the property.
     * @return {ConfigPropertyMeta} The meta config.
     */
    getPropertyConfig(propertyName) {
        const prop = SfdxConfig.propertyConfigMap[propertyName];
        if (!prop) {
            throw sfdxError_1.SfdxError.create('@salesforce/core', 'config', 'UnknownConfigKey', [propertyName]);
        }
        return prop;
    }
    /**
     * Encrypts and content properties that have a encryption attribute.
     * @param {boolean} encrypt `true` to encrypt.
     * @return {Promise<void>}
     */
    async cryptProperties(encrypt) {
        const hasEncryptedProperties = _.some(this.entries(), ([key, val]) => !!SfdxConfig.propertyConfigMap[key].encrypted);
        if (hasEncryptedProperties) {
            await this.initCrypto();
            this.forEach((key, value) => {
                if (this.getPropertyConfig(key).encrypted) {
                    this.set(key, encrypt ? this.crypto.encrypt(value) : this.crypto.decrypt(value));
                }
            });
        }
    }
}
/**
 * Username associated with the default dev hub org.
 * @type {string}
 */
SfdxConfig.DEFAULT_DEV_HUB_USERNAME = 'defaultdevhubusername';
/**
 * Username associate with the default org.
 * @type {string}
 */
SfdxConfig.DEFAULT_USERNAME = 'defaultusername';
/**
 * The sid for the debugger configuration.
 * @type {string}
 */
SfdxConfig.ISV_DEBUGGER_SID = 'isvDebuggerSid';
/**
 * The url for the debugger configuration.
 * @type {string}
 */
SfdxConfig.ISV_DEBUGGER_URL = 'isvDebuggerUrl';
exports.SfdxConfig = SfdxConfig;
exports.ORG_DEFAULT = {
    DEVHUB: SfdxConfig.DEFAULT_DEV_HUB_USERNAME,
    USERNAME: SfdxConfig.DEFAULT_USERNAME,
    list() {
        return [exports.ORG_DEFAULT.DEVHUB, exports.ORG_DEFAULT.USERNAME];
    }
};
//# sourceMappingURL=sfdxConfig.js.map