"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Org Fields.
 * @typedef OrgFields
 * @property {string} ALIAS The org alias.
 * @property {string} CREATED_ORG_INSTANCE The Salesforce instance the org was created on. e.g. `cs42`.
 * @property {string} DEV_HUB_USERNAME The username of the dev hub org that created this org. Only populated for scratch orgs.
 * @property {string} INSTANCE_URL The full url of the instance the org lives on.
 * @property {string} IS_DEV_HUB Is the current org a dev hub org. e.g. They have access to the `ScratchOrgInfo` object.
 * @property {string} LOGIN_URL The login url of the org. e.g. `https://login.salesforce.com` or `https://test.salesforce.com`.
 * @property {string} ORG_ID The org ID.
 * @property {string} STATUS The `OrgStatus` of the org.
 */
/**
 * Scratch Org status.
 * @typedef OrgStatus
 * @property {string} ACTIVE The scratch org is active.
 * @property {string} EXPIRED The scratch org has expired.
 * @property {string} UNKNOWN The org is a scratch Org but no dev hub is indicated.
 * @property {string} MISSING The dev hub configuration is reporting an active Scratch org but the AuthInfo cannot be found.
 */
const path_1 = require("path");
const aliases_1 = require("./config/aliases");
const connection_1 = require("./connection");
const logger_1 = require("./logger");
const sfdxConfig_1 = require("./config/sfdxConfig");
const sfdxConfigAggregator_1 = require("./config/sfdxConfigAggregator");
const lodash_1 = require("lodash");
const authInfo_1 = require("./authInfo");
const global_1 = require("./global");
const orgUsersConfig_1 = require("./config/orgUsersConfig");
const sfdxError_1 = require("./sfdxError");
const sfdc_1 = require("./util/sfdc");
const fs = require("./util/fs");
var OrgStatus;
(function (OrgStatus) {
    OrgStatus["ACTIVE"] = "ACTIVE";
    OrgStatus["EXPIRED"] = "EXPIRED";
    OrgStatus["UNKNOWN"] = "UNKNOWN";
    OrgStatus["MISSING"] = "MISSING";
})(OrgStatus = exports.OrgStatus || (exports.OrgStatus = {}));
// A subset of fields from AuthInfoFields and properties that are specific to Org,
// and properties that are defined on Org itself.
var OrgFields;
(function (OrgFields) {
    // From AuthInfo
    OrgFields["ALIAS"] = "alias";
    OrgFields["CREATED"] = "created";
    OrgFields["CREATED_ORG_INSTANCE"] = "createdOrgInstance";
    OrgFields["DEV_HUB_USERNAME"] = "devHubUsername";
    OrgFields["INSTANCE_URL"] = "instanceUrl";
    OrgFields["IS_DEV_HUB"] = "isDevHub";
    OrgFields["LOGIN_URL"] = "loginUrl";
    OrgFields["ORG_ID"] = "orgId";
    // From Org
    OrgFields["STATUS"] = "status";
    // Should it be on org? Leave it off for now, as it might
    // be confusing to the consumer what this actually is.
    // USERNAMES = 'usernames',
    // Keep separation of concerns. I think these should be on a "user" that belongs to the org.
    // Org can have a list of user objects that belong to it? Should connection be on user and org.getConnection()
    // gets the orgs current user for the process? Maybe we just want to keep with the Org only model for
    // the end of time?
    // USER_ID = 'userId',
    // USERNAME = 'username',
    // PASSWORD = 'password',
    // USER_PROFILE_NAME = 'userProfileName'
})(OrgFields = exports.OrgFields || (exports.OrgFields = {}));
const _manageDelete = function (cb, dirPath, throwWhenRemoveFails) {
    return cb().catch((e) => {
        if (throwWhenRemoveFails) {
            throw e;
        }
        else {
            this.logger.warn(`failed to read directory ${dirPath}`);
            return;
        }
    });
};
/**
 * Provides a way to manage a locally authenticated Org.
 *
 * @see {@link AuthInfo}
 * @see {@link Connection}
 * @see {@link Aliases}
 * @see {@link SfdxConfig}
 *
 * @example
 * // Email username
 * const org1: Org = await Org.create('foo@example.com');
 * // An alias
 * const org2: Org = await Org.create('fooAlias');
 * // The defaultusername config property
 * const org2: Org = await Org.create();
 * // Full Connection
 * const org3: Org = await Org.create(await Connection.create(await AuthInfo.create('bar@example.com')));
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_usernames_orgs.htm
 */
class Org {
    /**
     * **Do not directly construct instances of this class -- use {@link Org.create} instead.**
     *
     * @private
     * @constructor
     */
    constructor(_aggregator) {
        // tslint:disable-next-line:no-unused-variable
        this.status = OrgStatus.UNKNOWN;
        this.configAggregator = _aggregator;
    }
    /**
     * Static initializer that allows creating an instance of an org from an alias, username, or Connection. If no identifier
     * is provided then the defaultusername is used. If isDevHub is true then the defaultdevhubusername is used.
     * @see {@link SfdxConfig}
     * @param {string | Connection} [connection] The string alias or username.
     * @param {SfdxConfigAggregator} [aggregator] optional config aggregator.
     * @param {boolean} [isDevHub] true if this org is a devhub. defaults to false.
     * @return {Promise<Org>}
     */
    static async create(connection, aggregator, isDevHub) {
        const _aggregator = aggregator ? aggregator : await sfdxConfigAggregator_1.SfdxConfigAggregator.create();
        const org = new Org(_aggregator);
        org.logger = await logger_1.Logger.child('Org');
        let _connection;
        if (!connection) {
            org.logger.debug('No connection specified. Trying default configurations');
            connection = isDevHub ?
                _aggregator.getInfo(sfdxConfig_1.SfdxConfig.DEFAULT_DEV_HUB_USERNAME).value :
                _aggregator.getInfo(sfdxConfig_1.SfdxConfig.DEFAULT_USERNAME).value;
            if (!connection) {
                throw new sfdxError_1.SfdxError(`No ${isDevHub ? 'default Devhub' : 'default'} username or Connection found.`, 'NoUsername');
            }
        }
        if (lodash_1.isString(connection)) {
            org.logger.debug('connection type is string');
            const aliasValue = await aliases_1.Aliases.fetch(connection);
            _connection = await connection_1.Connection.create(await authInfo_1.AuthInfo.create(aliasValue || connection), _aggregator);
        }
        else {
            _connection = connection;
        }
        org.logger.debug(`connection created for org user: ${_connection.getAuthInfo().getFields().username}`);
        org.setConnection(_connection);
        return org;
    }
    /**
     * Clean all data files in the org's data path. Usually <workspace>/.sfdx/orgs/<username>.
     * @param {string} [orgDataPath] A relative path other than "orgs/".
     * @returns {Promise<void>}
     */
    async cleanLocalOrgData(orgDataPath, throwWhenRemoveFails = false) {
        let dataPath;
        try {
            const rootFolder = await sfdxConfig_1.SfdxConfig.resolveRootFolder(false);
            dataPath = path_1.join(rootFolder, global_1.Global.STATE_FOLDER, orgDataPath ? orgDataPath : 'orgs');
            this.logger.debug(`cleaning data for path: ${dataPath}`);
        }
        catch (err) {
            if (err.name === 'InvalidProjectWorkspace') {
                // If we aren't in a project dir, we can't clean up data files.
                // If the user unlink this org outside of the workspace they used it in,
                // data files will be left over.
                return;
            }
            throw err;
        }
        return _manageDelete.call(this, async () => await fs.remove(dataPath), dataPath, throwWhenRemoveFails);
    }
    async retrieveOrgUsersConfig() {
        return await orgUsersConfig_1.OrgUsersConfig.create(orgUsersConfig_1.OrgUsersConfig.getOptions(this.getOrgId()));
    }
    /**
     * Removes the scratch org config file at $HOME/.sfdx/[name].json, any project level org
     * files, all user auth files for the org, matching default config settings, and any
     * matching aliases.
     * @param {boolean} [throwWhenRemoveFails = false] Determines if the call should throw an error or fail silently.
     * @returns {Promise<void>}
     */
    async remove(throwWhenRemoveFails) {
        // If deleting via the access token there shouldn't be any auth config files
        // so just return;
        if (this.getConnection().getAuthInfo().isUsingAccessToken()) {
            return Promise.resolve();
        }
        const auths = await this.readUserAuthFiles();
        const aliases = await aliases_1.Aliases.retrieve();
        this.logger.info(`Cleaning up usernames in org: ${this.getOrgId()}`);
        for (const auth of auths) {
            const username = auth.getFields().username;
            const aliasKeys = aliases.getKeysByValue(username) || [];
            aliases.unsetAll(aliasKeys);
            let orgForUser;
            if (username === this.getUsername()) {
                orgForUser = this;
            }
            else {
                const _info = await authInfo_1.AuthInfo.create(username);
                const connection = await connection_1.Connection.create(_info);
                orgForUser = await Org.create(connection);
            }
            const orgType = await this.isDevHubOrg() ? sfdxConfig_1.SfdxConfig.DEFAULT_DEV_HUB_USERNAME : sfdxConfig_1.SfdxConfig.DEFAULT_USERNAME;
            const configInfo = await orgForUser.configAggregator.getInfo(orgType);
            if ((configInfo.value === username || aliasKeys.includes(configInfo.value)) &&
                (configInfo.isGlobal() || configInfo.isLocal())) {
                await sfdxConfig_1.SfdxConfig.update(configInfo.isGlobal(), orgType, undefined);
            }
            const orgUsers = await this.retrieveOrgUsersConfig();
            _manageDelete.call(this, async () => await orgUsers.unlink(), orgUsers.getPath(), throwWhenRemoveFails);
        }
        await aliases.write();
    }
    /**
     * Check that this org is a scratch org by asking the dev hub if it knows about it.
     * @param {string} [devHubUsername] The username of the dev hub org.
     * @returns {Promise<Config>}
     * @throws {SfdxError} **`{name: 'NotADevHub'}`** Not a Dev Hub.
     * @throws {SfdxError} **`{name: 'NoResults'}`** No results.
     */
    async checkScratchOrg(devHubUsername) {
        let targetDevHub = devHubUsername;
        if (!targetDevHub) {
            targetDevHub = this.configAggregator.getPropertyValue(sfdxConfig_1.SfdxConfig.DEFAULT_DEV_HUB_USERNAME);
        }
        const devHubConnection = await connection_1.Connection.create(await authInfo_1.AuthInfo.create(targetDevHub));
        const thisOrgAuthConfig = this.getConnection().getAuthInfo().getFields();
        const trimmedId = sfdc_1.trimTo15(thisOrgAuthConfig.orgId);
        const DEV_HUB_SOQL = `SELECT CreatedDate,Edition,ExpirationDate FROM ActiveScratchOrg WHERE ScratchOrg=\'${trimmedId}\'`;
        let results;
        try {
            results = await devHubConnection.query(DEV_HUB_SOQL);
        }
        catch (err) {
            if (err.name === 'INVALID_TYPE') {
                throw sfdxError_1.SfdxError.create('@salesforce/core', 'org', 'NotADevHub', [devHubConnection.getAuthInfo().getFields().username]);
            }
            throw err;
        }
        if (lodash_1.get(results, 'records.length') !== 1) {
            throw new sfdxError_1.SfdxError('No results', 'NoResults');
        }
        return thisOrgAuthConfig;
    }
    /**
     * Returns the Org object or null if this org is not affiliated with a Dev Hub (according to the local config).
     * @returns {Promise<Org>}
     */
    async getDevHubOrg() {
        if (this.isDevHubOrg()) {
            return Promise.resolve(this);
        }
        else if (this.getField(OrgFields.DEV_HUB_USERNAME)) {
            return Org.create(await connection_1.Connection.create(await authInfo_1.AuthInfo.create(this.getField(OrgFields.DEV_HUB_USERNAME))));
        }
    }
    /**
     * Returns `true` if the org is a Dev Hub.
     * @returns {Boolean}
     */
    isDevHubOrg() {
        return this.getField(OrgFields.IS_DEV_HUB);
    }
    /**
     * Refreshes the auth for this org's instance by calling HTTP GET on the baseUrl of the connection object.
     * @returns {Promise<void>}
     */
    async refreshAuth() {
        this.logger.debug('Refreshing auth for org.');
        const requestInfo = {
            url: this.getConnection().baseUrl(),
            method: 'GET'
        };
        const conn = this.getConnection();
        await conn.request(requestInfo);
    }
    /**
     *  Reads and returns the content of all user auth files for this org as an array.
     *  @returns {Promise<AuthInfo[]>}
     */
    async readUserAuthFiles() {
        const config = await this.retrieveOrgUsersConfig();
        const contents = await config.read();
        const thisUsername = this.getUsername();
        const usernames = contents.get('usernames') || [thisUsername];
        return Promise.all(usernames.map((username) => {
            if (username === thisUsername) {
                return this.getConnection().getAuthInfo();
            }
            else {
                return authInfo_1.AuthInfo.create(username);
            }
        }));
    }
    /**
     * Adds a username to the user config for this org.
     * @param {AuthInfo | string} auth The AuthInfo for the username to add.
     * @returns {Promise<Org>} For convenience `this` object is returned.
     * @example
     * const org: Org = await Org.create(await Connection.create(await AuthInfo.create('foo@example.com')));
     * const userAuth: AuthInfo = await AuthInfo.create('bar@example.com');
     * await org.addUsername(userAuth);
     */
    async addUsername(auth) {
        if (!auth) {
            throw new sfdxError_1.SfdxError('Missing auth info', 'MissingAuthInfo');
        }
        const _auth = lodash_1.isString(auth) ? await authInfo_1.AuthInfo.create(auth) : auth;
        this.logger.debug(`adding username ${_auth.getFields().username}`);
        const orgConfig = await this.retrieveOrgUsersConfig();
        const contents = await orgConfig.read();
        const usernames = contents.get('usernames') || [];
        let shouldUpdate = false;
        const thisUsername = this.getUsername();
        if (!usernames.includes(thisUsername)) {
            usernames.push(thisUsername);
            shouldUpdate = true;
        }
        if (auth) {
            usernames.push(_auth.getFields().username);
            shouldUpdate = true;
        }
        if (shouldUpdate) {
            orgConfig.set('usernames', usernames);
            await orgConfig.write();
        }
        return this;
    }
    /**
     * Removes a username from the user config for this object.
     * @param {AuthInfo | string} auth The AuthInfo containing the username to remove.
     * @returns {Promise<Org>} For convenience `this` object is returned.
     * @throws {SfdxError} **`{name: 'MissingAuthInfo'}`** Auth info is missing.
     */
    async removeUsername(auth) {
        if (!auth) {
            throw new sfdxError_1.SfdxError('Missing auth info', 'MissingAuthInfo');
        }
        const _auth = lodash_1.isString(auth) ? await authInfo_1.AuthInfo.create(auth) : auth;
        this.logger.debug(`removing username ${_auth.getFields().username}`);
        const orgConfig = await this.retrieveOrgUsersConfig();
        const contents = await orgConfig.read();
        const targetUser = _auth.getFields().username;
        contents.set('usernames', lodash_1.filter(contents.get('usernames'), (username) => username !== targetUser));
        await orgConfig.write();
        return this;
    }
    /**
     * Retrieves the highest api version that is supported by the target server instance. If the apiVersion configured for
     * Sfdx is greater than the one returned in this call an api version mismatch occurs. In the case of the CLI that
     * results in a warning.
     * @returns {Promise<string>} The max api version number, i.e `46.0`.
     */
    async retrieveMaxApiVersion() {
        return await this.getConnection().retrieveMaxApiVersion();
    }
    /**
     * Returns the admin username used to create the org.
     * @return {string}
     */
    getUsername() {
        return this.getAuthInfo().getUsername();
    }
    /**
     * Returns the orgId for this org.
     * @return {string}
     */
    getOrgId() {
        return this.getField(OrgFields.ORG_ID);
    }
    /**
     * Returns for the config aggregator.
     * @returns {SfdxConfigAggregator}
     */
    getConfigAggregator() {
        return this.configAggregator;
    }
    /**
     * Returns an org field. Returns undefined if the field is not set or invalid.
     * @returns {AnyJson}
     */
    getField(key) {
        return this[key] || this.getAuthInfo().getFields()[key];
    }
    /**
     * Returns a map of requested fields.
     * @returns {Dictionary<AnyJson>}
     */
    getFields(keys) {
        return keys.reduce((map, key) => { map[key] = this.getField(key); return map; }, {});
    }
    /**
     * Returns the org connection's auth info
     * @returns {AuthInfo}
     */
    getAuthInfo() {
        return this.getConnection().getAuthInfo();
    }
    /**
     * Returns the JSForce connection for the org.
     * @returns {Connection}
     */
    getConnection() {
        return this.connection;
    }
    /**
     * Sets the JSForce connection to use for this org.
     * @param {Connection} connection The connection to use.
     * @returns {Org} For convenience `this` object is returned.
     * @throws {SfdxError} **`{name: 'UndefinedConnection'}`** The connection was not defined.
     * @see {@link http://jsforce.github.io/jsforce/doc/Connection.html}
     */
    setConnection(connection) {
        if (connection) {
            this.connection = connection;
            return this;
        }
        else {
            throw new sfdxError_1.SfdxError('Connection not specified', 'UndefinedConnection');
        }
    }
}
exports.Org = Org;
//# sourceMappingURL=org.js.map