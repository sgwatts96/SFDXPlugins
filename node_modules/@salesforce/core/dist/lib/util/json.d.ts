import { AnyJson, JsonArray, JsonMap } from '../types';
/**
 * Read a file and convert it to JSON.
 *
 * @param {string} jsonPath The path of the file.
 * @param {boolean} [throwOnEmpty] Whether to throw an error if the JSON file is empty.
 * @return {Promise<AnyJson>} The contents of the file as a JSON object.
 */
export declare function readJson(jsonPath: string, throwOnEmpty?: boolean): Promise<AnyJson>;
/**
 * Read a file and convert it to JSON, throwing an error if the parsed contents are not a `JsonMap`.
 *
 * @param {string} jsonPath The path of the file.
 * @param {boolean} [throwOnEmpty] Whether to throw an error if the JSON file is empty.
 * @return {Promise<JsonMap>} The contents of the file as a JSON object.
 */
export declare function readJsonMap(jsonPath: string, throwOnEmpty?: boolean): Promise<JsonMap>;
/**
 * Convert a JSON-compatible object to a `string` and write it to a file.
 *
 * @param {string} jsonPath The path of the file to write.
 * @param {object} data The JSON object to write.
 * @return {Promise<void>}
 */
export declare function writeJson(jsonPath: string, data: AnyJson): Promise<void>;
/**
 * Parse JSON `string` data.
 *
 * @param {string} data Data to parse.
 * @param {String} [jsonPath=unknown] The file path from which the JSON was loaded.
 * @param {boolean} [throwOnEmpty=true] If the data contents are empty.
 * @returns {Promise<AnyJson>}
 * @throws {SfdxError} **`{name: 'JsonParseError'}`** If the data contents are empty.
 */
export declare function parseJson(data: string, jsonPath?: string, throwOnEmpty?: boolean): Promise<AnyJson>;
/**
 * Parse JSON `string` data, expecting the result to be a `JsonMap`.
 *
 * @param {string} data Data to parse.
 * @param {String} [jsonPath=unknown] The file path from which the JSON was loaded.
 * @param {boolean} [throwOnEmpty=true] If the data contents are empty.
 * @returns {Promise<JsonMap>}
 * @throws {SfdxError} **`{name: 'JsonParseError'}`** If the data contents are empty.
 * @throws {SfdxError} **`{name: 'UnexpectedJsonFileFormat'}`** If the data contents are not a `JsonMap`.
 */
export declare function parseJsonMap(data: string, jsonPath?: string, throwOnEmpty?: boolean): Promise<JsonMap>;
/**
 * Finds all elements of type `T` with a given name in a `JsonMap`.  Not suitable for use
 * with object graphs containing circular references.  The specification of an appropriate
 * type `T` that will satisfy all matching element values is the responsibility of the caller.
 *
 * @param {JsonMap} json The JSON object tree to search for elements of the given name.
 * @param {string} name The name of elements to search for.
 * @returns {T[]} An array of matching elements.
 */
export declare function getJsonValuesByName<T extends AnyJson>(json: JsonMap, name: string): T[];
/**
 * Tests whether any JSON value is an object.
 *
 * @param {AnyJson} json Any JSON value to test.
 * @returns {boolean}
 */
export declare function isJsonMap(json?: AnyJson): json is JsonMap;
/**
 * Tests whether any JSON value is an array.
 *
 * @param {AnyJson} json Any JSON value to test.
 * @returns {boolean}
 */
export declare function isJsonArray(json?: AnyJson): json is JsonArray;
/**
 * Narrows an `AnyJson` value to a `string` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} value Any JSON value to test.
 * @returns {string}
 */
export declare function asString(value?: AnyJson): string | undefined;
/**
 * Narrows an `AnyJson` value to a `number` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} value Any JSON value to test.
 * @returns {number}
 */
export declare function asNumber(value?: AnyJson): number | undefined;
/**
 * Narrows an `AnyJson` value to a `boolean` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} value Any JSON value to test.
 * @returns {boolean}
 */
export declare function asBoolean(value?: AnyJson): boolean | undefined;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} value Any JSON value to test.
 * @returns {JsonMap}
 */
export declare function asJsonMap(value?: AnyJson): JsonMap | undefined;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} value Any JSON value to test.
 * @returns {JsonArray}
 */
export declare function asJsonArray(value?: AnyJson): JsonArray | undefined;
/**
 * Narrows an `AnyJson` value to a `string` if it is type compatible, or raise an `SfdxError` otherwise.
 *
 * @param {AnyJson} value Any JSON value to test.
 * @returns {string}
 */
export declare function ensureString(value?: AnyJson): string;
/**
 * Narrows an `AnyJson` value to a `number` if it is type compatible, or raise an `SfdxError` otherwise.
 *
 * @param {AnyJson} value Any JSON value to test.
 * @returns {number}
 */
export declare function ensureNumber(value?: AnyJson): number;
/**
 * Narrows an `AnyJson` value to a `boolean` if it is type compatible, or raise an `SfdxError` otherwise.
 *
 * @param {AnyJson} value Any JSON value to test.
 * @returns {boolean}
 */
export declare function ensureBoolean(value?: AnyJson): boolean;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type compatible, or raise an `SfdxError` otherwise.
 *
 * @param {AnyJson} value Any JSON value to test.
 * @returns {JsonMap}
 */
export declare function ensureJsonMap(value?: AnyJson): JsonMap;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type compatible, or raise an `SfdxError` otherwise.
 *
 * @param {AnyJson} value Any JSON value to test.
 * @returns {JsonArray}
 */
export declare function ensureJsonArray(value?: AnyJson): JsonArray;
/**
 * Returns the first key within the object that has an upper case first letter.
 *
 * @param {JsonMap} json The object in which to check key casing.
 * @returns {string}
 */
export declare function findUpperCaseKeys(json: JsonMap): string;
