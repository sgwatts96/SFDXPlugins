/**
 * @private
 */
export declare class KeychainAccess {
    private osImpl;
    private fsIfc;
    /**
     * Abstract prototype for general cross platform keychain interaction.
     * @param osImpl The platform impl for (linux, darwin, windows)
     * @param fsIfc The file system interface
     * @constructor
     */
    constructor(osImpl: any, fsIfc: any);
    validateProgram(): Promise<void>;
    /**
     * Returns a password using the native program for credential management.
     * @param opts Options for the credential lookup.
     * @param fn Callback function (err, password).
     * @param retryCount Used internally to track the number of retries for getting a password out of the keychain.
     */
    getPassword(opts: any, fn: any, retryCount?: number): Promise<string>;
    /**
     * Sets a password using the native program for credential management.
     * @param opts Options for the credential lookup.
     * @param fn Callback function (err, password).
     */
    setPassword(opts: any, fn: any): Promise<void>;
}
/**
 * @private
 */
export declare class GenericKeychainAccess {
    getPassword(opts: any, fn: any): Promise<any>;
    setPassword(opts: any, fn: any): Promise<any>;
    protected isValidFileAccess(cb: (val?: any) => Promise<void>): Promise<void>;
}
/**
 * @private
 */
export declare class GenericUnixKeychainAccess extends GenericKeychainAccess {
    protected isValidFileAccess(cb: (val?: any) => Promise<void>): Promise<void>;
}
/**
 * @private
 */
export declare class GenericWindowsKeychainAccess extends GenericKeychainAccess {
}
/**
 * @private
 */
export declare const keyChainImpl: {
    generic_unix: GenericUnixKeychainAccess;
    generic_windows: GenericWindowsKeychainAccess;
    darwin: KeychainAccess;
    linux: KeychainAccess;
    validateProgram: (programPath: any, fsIfc: any, isExeIfc: any) => Promise<void>;
};
export declare type KeyChain = GenericUnixKeychainAccess | GenericWindowsKeychainAccess | KeychainAccess;
